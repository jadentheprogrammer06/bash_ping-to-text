#!/bin/bash
LOGO="╺┳╸┏━┓┏━┓┏━╸┏━╸┏━┓┏━┓╻ ╻╺┳╸┏━╸   ╺┳╸┏━┓   ╺┳╸┏━╸╻ ╻╺┳╸\n ┃ ┣┳┛┣━┫┃  ┣╸ ┣┳┛┃ ┃┃ ┃ ┃ ┣╸ ╺━╸ ┃ ┃ ┃╺━╸ ┃ ┣╸ ┏╋┛ ┃\n ╹ ╹┗╸╹ ╹┗━╸┗━╸╹┗╸┗━┛┗━┛ ╹ ┗━╸    ╹ ┗━┛    ╹ ┗━╸╹ ╹ ╹"
OUTPUT_DIR=~/Documents/ping-to-text_output
LOGS_DIR=$OUTPUT_DIR/logs
CACHE_DIR=$OUTPUT_DIR/cache
CACHE_TRACEROUTE=$CACHE_DIR/cache_traceroute.txt
LOGS_DIR_TRACEROUTE=$LOGS_DIR/traceroute
RUN_LOOP=1
ARG_TRACEROUTED=0
MULTIPLE_ARGS=0
[[ $# > 1 ]] && MULTIPLE_ARGS=1 || MULTIPLE_ARGS=0

traceroute_to_text() {
	echo "tracerouting $userinput ... *note: traceroute could take a bit longer."; traceroute $userinput >> $CACHE_TRACEROUTE && printf "\n$userinput was tracerouted." || printf "\nWas not able to traceroute $userinput."
	printf "\n Now printing output in $CACHE_TRACEROUTE file ...\n"; sleep 4; cat $CACHE_TRACEROUTE
	DATETIME=$(date +"_%T_%m_%d_%y")
	cp $CACHE_TRACEROUTE output_traceroute$DATETIME.txt && mv output_traceroute$DATETIME.txt $LOGS_DIR_TRACEROUTE &&  echo  "" > $CACHE_TRACEROUTE && printf "\nBackup ($LOGS_DIR_TRACEROUTE/output_traceroute$DATETIME.txt) made. New cache file ready for usage."
}

check_for_dir() {
	[[ -d "$DIR_NAME" ]] && echo "Directory exists. ($DIR_NAME)" || echo "Directory non-existent. Creating one now. ($DIR_NAME)"; mkdir -p $DIR_NAME
}

while [ $RUN_LOOP == 1 ]; do
	RUN_PROMPT_LOOP=1
	printf "$LOGO \n\n\n"

for DIR_NAME in $OUTPUT_DIR $LOGS_DIR $LOGS_DIR_TRACEROUTE $CACHE_DIR; do
	check_for_dir
done

if [ $MULTIPLE_ARGS == 0 ]; then
	[[ $1 == '' ]] && printf "\nPlease enter the DNS/IP address (website URL) you would like to traceroute.\n>>>";
	[[ $1 != '' ]] && printf "\nDetected argument provided from shell: $1\n" && userinput=$1 && ARG_TRACEROUTED=1 || read userinput
	traceroute_to_text
else
	ARG_TRACEROUTED=1
	printf "\nDetected multiple arguments provided from shell:\n"
	for arg_var in "$@"
	do
		userinput=$arg_var
		traceroute_to_text
	done
fi

	[[ $ARG_TRACEROUTED == 1 ]] && printf "\nFinished tracerouting shell-argument(s). Now exiting program." && break || printf "\n"
	printf '\n\nWould you like to run the script again? ["yes" to run or "no" to exit]\n'
	yesorno=""

	while [ $RUN_PROMPT_LOOP=1 ];
	do
		[[ $yesorno != "n"* ]] && [[ $yesorno != "y"* ]] && read -p "(y)yes or (n)no >>>" yesorno || RUN_PROMPT_LOOP=0; [[ $RUN_PROMPT_LOOP == 0 ]] && break || echo "Enter a valid option."
	done
	[[ $yesorno == "y"* ]] && printf "\n\n\n\n\n\n" RUN_LOOP=1 || break
done

